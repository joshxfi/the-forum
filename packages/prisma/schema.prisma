// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  username  String    @unique
  password  String
  messages  Message[] @relation("messages")
  replies   Reply[]   @relation("replies")
  upvotes   Upvote[]  @relation("upvotes")
}

model Message {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String   @db.VarChar(500)
  isAnonymous Boolean  @default(false)
  replies     Reply[]  @relation("replies")
  upvotes     Upvote[] @relation("upvotes")

  userId String
  user   User   @relation(name: "messages", fields: [userId], references: [id])

  @@index([userId, isAnonymous, updatedAt(sort: Desc)])
}

model Reply {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String   @db.VarChar(500)
  isAnonymous Boolean  @default(false)
  upvotes     Upvote[] @relation("upvotes")

  messageId String
  message   Message @relation(name: "replies", fields: [messageId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(name: "replies", fields: [userId], references: [id])

  @@index([messageId, isAnonymous, updatedAt(sort: Asc)])
  @@index([userId, isAnonymous, updatedAt(sort: Desc)])
}

model Upvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(name: "upvotes", fields: [userId], references: [id])

  messageId String?
  message   Message? @relation(name: "upvotes", fields: [messageId], references: [id], onDelete: Cascade)

  replyId String?
  reply   Reply?  @relation(name: "upvotes", fields: [replyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([messageId, userId])
  @@index([replyId, userId])
}
